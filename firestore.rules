rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /sellerUsernames/{username} {
      // Allow read access to authenticated users (e.g., to check username availability)
      allow read: if request.auth != null;

      // Allow write (create/update/delete) only from Cloud Functions
      allow write: if isCloudFunctionRequest();
    }

    // Function to check if the request comes from a Cloud Function
    function isCloudFunctionRequest() {
      // Cloud Functions using Admin SDK typically have a null request.auth
      // because they bypass client-side auth, but you can add custom checks
      return request.auth == null || 
             (request.auth != null && request.auth.token.isCloudFunction == true);
    }

    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
      allow update: if isAdmin() && request.resource.data.keys().hasOnly(['isAdmin', 'isSeller']);


      match /users/{userId} {
      // Allow read access to authenticated users
      allow read: if request.auth != null;

      // Allow write (create/update) only from Cloud Functions
      allow write: if isCloudFunctionRequest();
    }




      // Admin SDK for diables accounts
      admin.auth().updateUser(uid, { disabled: true });

      allow read, update: if request.auth != null && request.auth.uid == userId;

      // Only allow creating a user document if it doesn't already exist
      allow create: if request.auth != null && request.auth.uid == userId && !exists(/databases/$(database)/documents/users/$(userId));

      // Prevent users from changing isActive themselves
      allow update: if request.resource.data.keys().hasOnly(['name', 'email', 'phone', 'address', 'createdAt']) &&
                    request.auth != null &&
                    request.auth.uid == userId;

      // Allow admin to update isActive
      allow update: if request.auth != null &&
                    request.auth.token.admin == true;

      allow read, update: if request.auth.uid == userId && resource.data.isActive == true;

    }

    // Sellers collection: Authenticated users can read; writes via becomeSeller function
     match /sellers/{username} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                     request.resource.data.uid == request.auth.uid &&
                     request.resource.data.sellerUsername == username;
      allow write: if false; // Prevent direct writes
    }

    // Temp posters: Users create their own; admins read/write
    match /tempPosters/{posterId} {
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // Posters: Authenticated users read; admins write
    match /posters/{posterId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Standalone collections: Authenticated users read; admins update posterIds
    match /standaloneCollections/{collectionId} {
      allow read: if request.auth != null;
      allow update: if isAdmin() && request.resource.data.keys().hasOnly(['posterIds']);
    }

    // Original posters: Authenticated users read; admins write
    match /originalPoster/{posterId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Temporary orders: Users create their own; admins read/write
    match /temporaryOrders/{orderId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // Orders: Admins read/write; users read their own
    match /orders/{orderId} {
      allow read: if request.auth != null && (isAdmin() || resource.data.customerId == request.auth.uid);
      allow write: if isAdmin();
    }

    // User orders subcollection: Users read their own; admins write
    match /userOrders/{userId}/orders/{orderId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if isAdmin();
    }

    // Site settings: Authenticated users read
    match /siteSettings/general {
      allow read: if request.auth != null;
      allow write: if false;
    }

    // Error logs: Write-only for Cloud Functions
    match /errorLogs/{logId} {
      allow write: if request.auth != null; // Functions use service account
      allow read: if false;
    }

    // Cart subcollection: Users read/write their own
    match /users/{userId}/cart/{cartItemId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Admin-only collections (e.g., support, admin logs)
    match /supportTickets/{ticketId} {
      allow read, write: if request.auth != null && request.auth.token.role == "admin";
    }
  }
}
